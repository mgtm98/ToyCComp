program: function_declaration
       | var_declaration

function_declaration: datatype identifier '(' ')' statement_block
                    ;

var_declaration: datatype identifier [',' identifier]* ';'
               | datatype identifier '=' expr [',' identifier '=' expr] ';'
               | ;

datatype: 'int'
        | 'char'
        | 'void'
        | 'long'
        ;

statement_block: statement
               | '{' statements '}'
               ;

statements: statement
          | statement statements
          ;

statement: ';'
         | var_declaration
         | expression ';'
         | if_statement
         | while_statement
         | do_while_statement
         | for_statement
         | 'break' ';'
         | 'return' expression ';'
         ;

if_statement: 'if' '(' expression ')' statement_block
            | 'if' '(' expression ')' statement_block 'else' statement_block
            | 'if' '(' expression ')' statement_block 'else' if_statement

while_statement: 'while' '(' expression ')' statement_block

do_while_statement: 'do' statement_block 'while' '(' expression ')' ';'

# TODO: revesit the syntax for for loops
for_statement: 'for' '(' statement expression ';' assignment_expression ')' statement_block

expression: comparison_expression
          | assignment_expression
          ;

assignment_expression: lvalue '=' expression 

func_call_expression: identifier '(' args? ')'

args: expression [','  expression]*

comparison_expression: additive_expression
                     | additive_expression '<' additive_expression
                     | additive_expression '>' additive_expression
                     | additive_expression '<=' additive_expression
                     | additive_expression '>=' additive_expression
                     | additive_expression '==' additive_expression
                     | additive_expression '!=' additive_expression
                     ;

additive_expression:
      multiplicative_expression
    | additive_expression '+' multiplicative_expression
    | additive_expression '-' multiplicative_expression
    ;

multiplicative_expression: val
                         | val '*' multiplicative_expression
                         | val '/' multiplicative_expression
                         ;

lvalue: dref_expression
      | identifier
      ;

dref_expression: '*'+ val

val: number
   | identifier
   | '(' expression ')'
   | func_call_expression
   | lvalue
   | '&' identifier
   ;

number: INTLIT
      ;

identifier: IDENTIFIER
          ;